% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/host.R
\docType{data}
\name{Host}
\alias{Host}
\title{A Host}
\format{\code{R6Class}.}
\usage{
Host
}
\description{
Hosts allows you to remotely create, get, run methods of, and delete instances of various types.
The types can be thought of a "services" provided by the host e.g. `RContext`, `FileSystemStorer`
}
\details{
The API of a host is similar to that of a HTTP server. It's methods names
(e.g. `post`, `get`) are similar to HTTP methods (e.g. `POST`, `GET`) but
the sematics sometimes differ (e.g. a host's `put()` method is used to call an
instance method)

A host's methods are exposed by `HostHttpServer` and `HostWebsocketServer`.
Those other classes are responsible for tasks associated with their communication
protocol (e.g. serialising and deserialising objects).

This is a singleton class. There should only ever be one `Host` in memory in each process
(although, for purposes of testing, this is not enforced)
}
\section{new()}{


Create a new \code{Host}



Get the environment of this \code{Host} including the version of R
and the version of installed packages.
}

\section{user_dir()}{


Get the current user's Stencila data directory.

This is the directory that Stencila configuration settings, such as the
installed Stencila hosts, and document buffers get stored.
}

\section{temp_dir()}{


Get the current user's Stencila temporary directory

This directory is used by Stencila for files such as "run files" (see below)
}

\section{run_file()}{


Get the path of the "run file" for this host.

A run file is used to indicate that a particular host is running
and allow other Stencila processes on the same machine
to communicate with it. It is created by by \code{host$start()} and
destroyed by \code{host$stop()}. It is placed in the machine's temporarily
directory to reduce the chances of a run file being present when a host
has aborted with out by \code{host$stop()} being called.
}

\section{manifest()}{


Get a manifest for this host

The manifest describes the host and it's capabilities. It is used
by peer hosts to determine which "types" this host provides and
which "instances" have already been instantiated.
}

\section{register()}{


Register this Stencila \code{Host} on this machine.

Registering a host involves creating a file \code{r.json} inside of
the user's Stencila data (see \code{user_dir}) directory which describes
the capabilities of this host.
}

\section{create()}{


Create a new instance of a type

\describe{
  \item{type}{Type of new instance}
  \item{args}{Arguments to be passed to type constructor}
  \item{name}{Name of new instance. Depreciated but retained for compatability.}
  \item{return}{Address of the newly created instance}
}
}

\section{get()}{


Get an instance

\describe{
  \item{id}{ID of instance}
  \item{return}{The instance}
}
}

\section{call()}{


Call a method of an instance

\describe{
  \item{id}{ID of instance}
  \item{method}{Name of instance method}
  \item{arg}{The argument to pass to the method}
  \item{return}{The result of the method call}
}
}

\section{delete()}{


Delete an instance

\describe{
  \item{id}{ID of the instance}
}
}

\section{start()}{


Start serving this host

\describe{
  \item{address}{The address to listen. Default '127.0.0.1'}
  \item{port}{The port to listen on. Default 2000}
  \item{quiet}{Don't print out message. Default FALSE}
}

Currently, HTTP is the only server available
for hosts. We plan to implement a `HostWebsocketServer` soon.
}

\section{stop()}{


Stop serving this host. Stops all servers that are currently serving this host
}

\section{run()}{


\describe{
  \item{address}{The address to listen. Default '127.0.0.1'}
  \item{port}{The port to listen on. Default 2000}
  \item{quiet}{Do not print status messages to the console? Default FALSE}
  \item{echo}{Print the host's manifest to the console? Default FALSE}
}

Start serving the Stencila host and wait for connections indefinitely
}

\section{open()}{


Open a file in the browser.
}

\section{generate_token()}{


Generate a request token.

\describe{
  \item{host}{The id of the host}
}
}

\section{authorize_token()}{


Authorize a request token.

Throws an error if the token is invalid.

\describe{
  \item{token}{The request token}
}
}

\section{id}{


Get unique ID of this host
}

\section{key}{


Get secret key of this host
}

\section{servers}{


Get a list of servers for this host. Servers are identified by the protocol shorthand
e.g. `http` for `HostHttpServer`
}

\section{urls}{


Get a list of URLs for this host
}

\examples{
host$servers
host$start()
host$servers
host$stop()
}
\keyword{datasets}
